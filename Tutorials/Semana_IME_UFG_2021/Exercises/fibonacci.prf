(fibonacci
 (fibonacci_TCC1 0
  (fibonacci_TCC1-1 nil 3789721363
   ("" (skeep) (("" (assert) nil nil)) nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (fibonacci_TCC2 0
  (fibonacci_TCC2-1 nil 3789721363 ("" (termination-tcc) nil nil) nil
   nil))
 (fibonacci_TCC3 0
  (fibonacci_TCC3-1 nil 3789721363 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (fibonacci_TCC4 0
  (fibonacci_TCC4-1 nil 3789721363 ("" (termination-tcc) nil nil) nil
   nil))
 (fibonacci_ineq 0
  (fibonacci_ineq-1 nil 3790079645
   ("" (skeep)
    (("" (expand "fibonacci" 1 1)
      (("" (assert)
        (("" (case-replace "n = 0")
          (("1" (assert)
            (("1" (expand "fibonacci") (("1" (assert) nil nil)) nil))
            nil)
           ("2" (assert) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((fibonacci def-decl "nat" fibonacci nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   shostak))
 (fibonacci_exp_lim 0
  (fibonacci_exp_lim-1 nil 3789721897
   ("" (measure-induct+ "n" "n")
    (("" (case-replace "x!1 = 0")
      (("1" (hide -2)
        (("1" (expand "fibonacci")
          (("1" (expand "expt") (("1" (assert) nil nil)) nil)) nil))
        nil)
       ("2" (case-replace "x!1 =1 ")
        (("1" (hide -2)
          (("1" (expand "fibonacci")
            (("1" (expand "expt")
              (("1" (expand "expt") (("1" (assert) nil nil)) nil))
              nil))
            nil))
          nil)
         ("2" (expand "fibonacci" 3)
          (("2" (assert)
            (("2" (inst-cp -1 "x!1 -1")
              (("2" (inst -1 "x!1 -2")
                (("2" (assert)
                  (("2"
                    (case "fibonacci(x!1 - 1) + fibonacci(x!1 - 2) <= expt(17/10, x!1 - 1) + expt(17/10, x!1 - 2)")
                    (("1"
                      (case-replace
                       "expt(17 / 10, x!1 - 1) + expt(17 / 10, x!1 - 2) = expt(17 / 10, x!1 -2) * (17 / 10 + 1)")
                      (("1" (hide -1)
                        (("1" (case "(17 / 10 + 1) < expt(1.7,2)")
                          (("1" (lemma "both_sides_times_pos_le2")
                            (("1"
                              (inst -1 "expt(17 / 10, x!1 - 2)"
                               "(17 / 10 + 1)" " expt(1.7, 2)")
                              (("1"
                                (assert)
                                (("1"
                                  (case
                                   " fibonacci(x!1 - 1) + fibonacci(x!1 - 2) <= expt(17/10, x!1 - 2) * expt(17/10, 2)")
                                  (("1"
                                    (hide -2 -3 -4 -5 -6)
                                    (("1"
                                      (rewrite "expt_plus_aux" :dir rl)
                                      nil
                                      nil))
                                    nil)
                                   ("2"
                                    (hide-all-but (-1 -3 1))
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide-all-but 1)
                            (("2" (grind) nil nil)) nil))
                          nil))
                        nil)
                       ("2" (hide-all-but 1)
                        (("2" (lemma "distributive")
                          (("2"
                            (inst -1 "expt(17 / 10, x!1 - 2)" "17 / 10"
                             "1")
                            (("2" (replace -1 1)
                              (("2"
                                (hide -1)
                                (("2"
                                  (lemma "expt_plus_aux")
                                  (("2"
                                    (inst -1 "x!1-2" "1" "17 / 10")
                                    (("2"
                                      (case-replace
                                       "(expt(17 / 10, x!1 - 2) * (17 / 10)) = expt(17 / 10, x!1 - 2) * expt(17 / 10, 1)")
                                      (("1"
                                        (hide -1)
                                        (("1"
                                          (replace -1 1 rl)
                                          (("1"
                                            (hide -1)
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide -1 2)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((= const-decl "[T, T -> boolean]" equalities nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (posrat_times_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (expt_plus_aux formula-decl nil exponentiation nil)
    (both_sides_times_pos_le2 formula-decl nil real_props nil)
    (distributive formula-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (posrat_plus_nnrat_is_posrat application-judgement "posrat"
     rationals nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posrat_expt application-judgement "posrat" exponentiation nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (expt def-decl "real" exponentiation nil)
    (fibonacci def-decl "nat" fibonacci nil)
    (<= const-decl "bool" reals nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (fibonacci_exp_lim_2 0
  (fibonacci_exp_lim_2-1 nil 3790070414
   ("" (measure-induct+ "n" "n")
    (("" (case-replace "x!1 = 11")
      (("1" (hide -2 -3) (("1" (grind) nil nil)) nil)
       ("2" (case-replace "x!1 =12 ")
        (("1" (hide -2 -3 1) (("1" (grind) nil nil)) nil)
         ("2" (expand "fibonacci" 3)
          (("2" (assert)
            (("2" (inst-cp -1 "x!1 -1")
              (("2" (inst -1 "x!1 -2")
                (("2" (assert)
                  (("2"
                    (case "fibonacci(x!1 - 1) + fibonacci(x!1 - 2) >= expt(3/2, x!1 - 1) + expt(3/2, x!1 - 2)")
                    (("1"
                      (case-replace
                       "expt(3 / 2, x!1 - 1) + expt(3 / 2, x!1 - 2) = expt(3 / 2, x!1 -2) * (3 / 2 + 1)")
                      (("1" (hide -1)
                        (("1" (case "(3 / 2 + 1) > expt(1.5,2)")
                          (("1" (lemma "both_sides_times_pos_le2")
                            (("1"
                              (inst -1 "expt(3 / 2, x!1 - 2)"
                               "expt(1.5, 2)" "(3 / 2 + 1)")
                              (("1"
                                (assert)
                                (("1"
                                  (case
                                   " fibonacci(x!1 - 1) + fibonacci(x!1 - 2) >= expt(3 / 2, x!1 - 2) * expt(3/2, 2)")
                                  (("1"
                                    (hide -2 -3 -4 -5 -6)
                                    (("1"
                                      (rewrite "expt_plus_aux" :dir rl)
                                      nil
                                      nil))
                                    nil)
                                   ("2"
                                    (hide-all-but (-1 -3 1))
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide-all-but 1)
                            (("2" (grind) nil nil)) nil))
                          nil))
                        nil)
                       ("2" (hide-all-but 1)
                        (("2" (lemma "distributive")
                          (("2"
                            (inst -1 "expt(3 / 2, x!1 - 2)" "3 / 2"
                             "1")
                            (("2" (replace -1 1)
                              (("2"
                                (hide -1)
                                (("2"
                                  (lemma "expt_plus_aux")
                                  (("2"
                                    (inst -1 "x!1-2" "1" "3 / 2")
                                    (("2"
                                      (case-replace
                                       "(expt(3 / 2, x!1 - 2) * (3 / 2)) = expt(3 / 2, x!1 - 2) * expt(3 / 2, 1)")
                                      (("1"
                                        (hide -1)
                                        (("1"
                                          (replace -1 1 rl)
                                          (("1"
                                            (hide -1)
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide -1 2)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((= const-decl "[T, T -> boolean]" equalities nil)
    (posrat_times_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (posrat_expt application-judgement "posrat" exponentiation nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (expt_plus_aux formula-decl nil exponentiation nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (both_sides_times_pos_le2 formula-decl nil real_props nil)
    (distributive formula-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (posrat_plus_nnrat_is_posrat application-judgement "posrat"
     rationals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (expt def-decl "real" exponentiation nil)
    (fibonacci def-decl "nat" fibonacci nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak)))

