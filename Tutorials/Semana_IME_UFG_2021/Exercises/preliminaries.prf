(topology
 (Prop01 0
  (Prop01-1 nil 3800892861
   ("" (lemma "Ax01")
    (("" (lemma "Ax02")
      (("" (skeep)
        (("" (copy -2)
          (("" (inst -1 X)
            (("" (inst -3 Y)
              (("" (assert)
                (("" (inst -2 X Y)
                  (("" (assert)
                    (("" (lemma "Ax01")
                      (("" (inst -1 "union(X, Y)")
                        (("" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Ax02 formula-decl nil topology nil)
    (union const-decl "set" sets nil) (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (Ax01 formula-decl nil topology nil))
   nil))
 (Prop02 0
  (Prop02-2 nil 3800892901
   ("" (skosimp)
    (("" (lemma "Ax01")
      (("" (lemma "Ax04")
        (("" (inst -1 "X!1")
          (("" (inst -2 "X!1") (("" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((Ax01 formula-decl nil topology nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (Ax04 formula-decl nil topology nil))
   nil)
  (Prop02-1 nil 3800892872 ("" (postpone) nil nil) nil shostak))
 (Prop03 0
  (Prop03-1 nil 3800892944
   ("" (skosimp)
    (("" (lemma "Ax06")
      (("" (inst -1 "X!1")
        (("" (assert)
          (("" (skosimp)
            (("" (lemma "Ax01")
              (("" (inst -1 "Y!1")
                (("" (assert)
                  (("" (expand "closed?")
                    (("" (lemma "complement_complement[int]")
                      (("" (inst -1 "X!1")
                        (("" (replace -4 1)
                          (("" (lemma "complement_complement[int]")
                            (("" (inst -1 "Y!1")
                              (("" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Ax06 formula-decl nil topology nil)
    (Ax01 formula-decl nil topology nil)
    (complement_complement formula-decl nil sets_lemmas nil)
    (closed? const-decl "bool" topology nil)
    (set type-eq-decl nil sets nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil))
 (Prop04 0
  (Prop04-1 nil 3800892982
   ("" (expand "finite?")
    (("" (expand "is_finite")
      ((""
        (inst 1 "2"
         "(LAMBDA (x:({x: int | x = 1 OR x = -1})): IF x = 1 THEN 0 ELSE 1 ENDIF)")
        (("" (expand "injective?")
          (("" (skosimp)
            (("" (lift-if)
              (("" (prop)
                (("1" (lift-if)
                  (("1" (prop)
                    (("1" (assert) nil nil) ("2" (assert) nil nil))
                    nil))
                  nil)
                 ("2" (lift-if)
                  (("2" (prop)
                    (("1" (assert) nil nil)
                     ("2" (typepred "x1!1" "x2!1")
                      (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((is_finite const-decl "bool" finite_sets nil)
    (injective? const-decl "bool" functions nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (finite? const-decl "pred[set[int]]" topology nil))
   nil))
 (Prop05 0
  (Prop05-1 nil 3800893010
   ("" (lemma "Ax09")
    (("" (assert)
      (("" (lemma "Ax07")
        (("" (inst -1 "per_PRIMES")
          (("" (assert)
            (("" (expand "closed?")
              (("" (expand "per_PRIMES")
                (("" (lemma "complement_complement[int]")
                  (("" (inst -1 "{x: int | x = 1 OR x = -1}")
                    (("" (assert)
                      (("" (replaces -1)
                        (("" (lemma "Ax01")
                          (("" (inst -1 "{x: int | x = 1 OR x = -1}")
                            (("" (assert)
                              ((""
                                (lemma "Ax05")
                                ((""
                                  (inst
                                   -1
                                   "{x: int | x = 1 OR x = -1}")
                                  ((""
                                    (assert)
                                    ((""
                                      (prop)
                                      (("1"
                                        (hide -)
                                        (("1"
                                          (lemma "Prop04")
                                          (("1" (propax) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide-all-but -1)
                                        (("2"
                                          (expand "emptyset")
                                          (("2"
                                            (decompose-equality)
                                            (("2"
                                              (inst -1 "1")
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (per_PRIMES const-decl "set[int]" topology nil)
    (closed? const-decl "bool" topology nil)
    (complement_complement formula-decl nil sets_lemmas nil)
    (Ax01 formula-decl nil topology nil)
    (Prop04 formula-decl nil topology nil)
    (emptyset const-decl "set" sets nil)
    (FALSE const-decl "bool" booleans nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (Ax05 formula-decl nil topology nil)
    (TRUE const-decl "bool" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (Ax07 formula-decl nil topology nil)
    (Ax09 formula-decl nil topology nil))
   nil)))
(groups
 (Pr01 0
  (Pr01-1 nil 3800892635
   ("" (lemma "Ax01")
    (("" (lemma "Ax02")
      (("" (flatten)
        (("" (split)
          (("1" (assert) nil nil) ("2" (propax) nil nil)
           ("3" (propax) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((Ax01 formula-decl nil groups nil)
    (Ax02 formula-decl nil groups nil))
   nil))
 (Pr02 0
  (Pr02-1 nil 3800892670
   ("" (lemma "Ax03") (("" (lemma "Ax04") (("" (prop) nil nil)) nil))
    nil)
   ((Ax03 formula-decl nil groups nil)
    (Ax04 formula-decl nil groups nil))
   nil))
 (Pr03 0
  (Pr03-1 nil 3800892705
   ("" (lemma "Ax01")
    (("" (lemma "Ax06") (("" (lemma "Pr02") (("" (prop) nil nil)) nil))
      nil))
    nil)
   ((Ax01 formula-decl nil groups nil)
    (Pr02 formula-decl nil groups nil)
    (Ax06 formula-decl nil groups nil))
   nil))
 (Pr04 0
  (Pr04-1 nil 3800892734
   ("" (lemma "Ax03")
    (("" (lemma "Ax04")
      (("" (prop) (("" (lemma "Ax05") (("" (prop) nil nil)) nil)) nil))
      nil))
    nil)
   ((Ax03 formula-decl nil groups nil)
    (Ax05 formula-decl nil groups nil)
    (Ax04 formula-decl nil groups nil))
   nil)))
(real_analysis
 (step_func_TCC1 0
  (step_func_TCC1-1 nil 3800892625
   ("" (skeep)
    (("" (expand "nonempty?")
      (("" (expand "empty?")
        (("" (inst -1 "floor(r)")
          (("" (expand "member")
            (("" (assert) (("" (rewrite "floor_def") nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nonempty? const-decl "bool" sets nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer nonempty-type-from-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (floor_def formula-decl nil floor_ceil nil)
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil))
   nil
   (step_func subtype
    "{n: integers.int | booleans.AND(reals.<=(n, real_analysis.r), reals.<(real_analysis.r, (number_fields.+)(n, 1)))}"
    "(sets[int].nonempty?)")))
 (Pr01 0
  (Pr01-1 nil 3800892772
   ("" (lemma "AX01")
    (("" (inst?)
      (("" (flatten)
        (("" (hide -1)
          (("" (split)
            (("1" (flatten)
              (("1" (lemma "AX02") (("1" (propax) nil nil)) nil)) nil)
             ("2" (propax) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((AX01 formula-decl nil real_analysis nil)
    (AX02 formula-decl nil real_analysis nil)
    (mod_func const-decl "real" real_analysis nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil))
 (Pr02 0
  (Pr02-1 nil 3800892801
   ("" (lemma "AX03")
    (("" (inst?)
      (("" (assert)
        (("" (hide -2)
          (("" (lemma "AX04") (("" (propax) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((AX03 formula-decl nil real_analysis nil)
    (AX04 formula-decl nil real_analysis nil)
    (step_func const-decl "real" real_analysis nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil))
 (Pr03 0
  (Pr03-1 nil 3800892828
   ("" (skeep)
    (("" (lemma "AX05")
      (("" (lemma "AX06")
        (("" (lemma "AX03")
          (("" (inst?)
            (("" (inst?)
              (("" (inst?) (("" (assert) (("" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((AX06 formula-decl nil real_analysis nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (AX03 formula-decl nil real_analysis nil)
    (AX05 formula-decl nil real_analysis nil))
   nil)))
(Pick_Theorem
 (Prop01 0
  (Prop01-1 nil 3799003275
   ("" (lemma "Ax04") (("" (assert) nil nil)) nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (Ax04 formula-decl nil Pick_Theorem nil))
   shostak))
 (Prop02 0
  (Prop02-1 nil 3799003165
   ("" (lemma "Prop01")
    (("" (lemma "Ax02") (("" (assert) nil nil)) nil)) nil)
   ((Ax02 formula-decl nil Pick_Theorem nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (Prop01 formula-decl nil Pick_Theorem nil))
   shostak))
 (Prop03 0
  (Prop03-1 nil 3799003119
   ("" (lemma "Prop02") (("" (assert) nil nil)) nil)
   ((odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (Prop02 formula-decl nil Pick_Theorem nil))
   shostak))
 (EulerFormula_variant 0
  (EulerFormula_variant-1 nil 3799003096
   ("" (lemma "EulerFormula") (("" (assert) nil nil)) nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (EulerFormula formula-decl nil Pick_Theorem nil))
   shostak))
 (Pick_Theorem 0
  (Pick_Theorem-1 nil 3799002698
   ("" (lemma "AreaIntPoly")
    (("" (lemma "Prop03")
      (("" (replace -1 -2)
        (("" (lemma "EulerFormula_variant")
          (("" (replace -1 -3)
            (("" (lemma "Ax01")
              (("" (replace -1 -4 rl)
                (("" (lemma "Ax03")
                  (("" (replace -1 -5) (("" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Prop03 formula-decl nil Pick_Theorem nil)
    (EulerFormula_variant formula-decl nil Pick_Theorem nil)
    (Ax01 formula-decl nil Pick_Theorem nil)
    (Ax03 formula-decl nil Pick_Theorem nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (nnrat_plus_nnrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (AreaIntPoly formula-decl nil Pick_Theorem nil))
   shostak)))

