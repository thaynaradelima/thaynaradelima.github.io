%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
%   Teaching Interactive Proofs to Mathematicians
%                      ThEdu2020       
%          
%         Results about groups, cyclic and torsion groups
%
%       Thaynara Arielly de Lima  UFG
%       Mauricio Ayala-Rincon     UnB
%
%       Last modified: June 14 2020
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


pred_algebra [T:TYPE+,*:[T,T->T],e:T]
		: THEORY

  BEGIN

  G, H: VAR set[T]
  a, x, y: VAR T
  n,m: nat
 

 %---------------------------------- Basic definitions -------------------------%

  closed?(G): bool = FORALL (x,y:(G)): member(x*y,G)      

  inv_exists?(G): bool = FORALL (x:(G)): EXISTS (y:(G)): x * y = e AND y * x = e

  group?(G): bool = closed?(G) AND
                    associative?[(G)](*) AND
  	     	    member(e,G) AND identity?[(G)](*)(e) AND
		    inv_exists?(G)


 %————————————————————————————————————————————–

  inv(G:(group?))(x:(G)): (G) = choose({y:(G) | x * y = e AND y * x = e})

 %————————————————————————————————————————————–

  inv_e: LEMMA
     FORALL (G:(group?)): inv(G)(e) = e

  
  id_charac: LEMMA                            
    FORALL (G:(group?), x:(G)): x = e IFF x * x = x 

  left_cancellative: LEMMA             
    FORALL (G:(group?), x,y,z:(G)): x * y = x * z IFF y = z  

  right_cancellative: LEMMA                                
    FORALL (G:(group?), x,y,z:(G)): y * x = z * x IFF y = z 

  right_unicity_id: LEMMA
    FORALL (G: (group?), x:(G)): exists1!(y:(G)): x * y = x  

  left_unicity_id: LEMMA	 		      	     
    FORALL (G: (group?), x:(G)): exists1!(y:(G)): y * x = x

  inv_inv: LEMMA
    FORALL (G: (group?), x:(G)): inv(G)(inv(G)(x)) = x

  inv_mult: LEMMA
     FORALL (G:(group?), x, y:(G)): inv(G)(x * y) = inv(G)(y) * inv(G)(x)
  
  
  
  abelian_group?(G): bool = group?(G) AND commutative?[(G)](*);

 %————————————————————————————————————————————–
   
  ^(y : T, n : nat ) : RECURSIVE T =
      	       	      IF n = 0 THEN e
		      ELSE  y * ^(y, n-1)
     		      ENDIF
		      MEASURE n

 
;
 ^(G:(group?))(y:(G), n: int) : T = IF n>= 0 THEN ^(y,n)
        	     	       	 ELSE ^(inv(G)(y),-n) ENDIF
 
; 


 %————————————————————————————————————————————–
 

   power_gen(x:T): set[T] = { y: T | EXISTS (n:nat) : y = x^n }

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%
%% Inductive properties of power_set  (Induction Exercises)
%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

 power_closed_aux: LEMMA                 
   FORALL (G: (group?), y: (G), n: nat): member(^(y,n),G)
    

 power_closed: LEMMA
   FORALL (G: (group?), y: (G), n: int): member(^(G)(y,n),G)

 power_e_aux: LEMMA 
   FORALL (G: (group?), n: nat): e^n = e

 power_e: LEMMA 
   FORALL (G: (group?), i: int): ^(G)(e,i) = e

 power_add_aux: LEMMA                         
   FORALL (G: (group?), y: (G), n,m: nat): ^(y,n) * ^(y,m) = ^(y, n+m)

 power_add_aux2: LEMMA                
   FORALL (G: (group?), y: (G), n, m: nat): ^(G)(y,m) * ^(G)(inv(G)(y),n)  = ^(G)(y, m - n)

 power_commute_aux: LEMMA                  
   FORALL (G: (group?), y: (G), n,m: nat): ^(y,n) * ^(y,m) = ^(y,m) * ^(y,n)


 power_commute: LEMMA                  
   FORALL (G: (group?), y: (G), n,m: int): ^(G)(y,n) * ^(G)(y,m) = ^(G)(y,m) * ^(G)(y,n)

 power_add: LEMMA                         
    FORALL (G: (group?), y: (G), n,m: int): ^(G)(y,n) * ^(G)(y,m) = ^(G)(y, n+m)

 power_mult_aux: LEMMA                   
      FORALL (G:(group?), y:(G), m,n: nat): (y^n)^m  = y^(n*m)

 power_inv_aux: LEMMA   
      FORALL (G:(group?), y:(G), n: nat): inv(G)(y^n) = inv(G)(y)^n

 power_mult: LEMMA                   
      FORALL (G:(group?), y:(G), i,j: int): ^(G)(^(G)(y,i),j) = ^(G)(y,i*j)
      

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


   cyclic?(G): bool = group?(G) AND EXISTS (y: (G)): FORALL(x:(G)): EXISTS (n: int): ^(G)(y,n) = x

   cyc_abel: LEMMA                              % Sec. 02 exercise
      cyclic?(G) IMPLIES abelian_group?(G)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

   torsion?(G): bool = group?(G) AND FORALL (y:(G)): EXISTS (n: posnat) : y^n = e

   finite_torsion: LEMMA                        
      FORALL (G: (group?)): is_finite(G) IMPLIES torsion?(G)

   
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%      

  subgroup?(H:set[T],G:(group?)): bool = subset?(H,G) AND group?(H)

  power_gen_fin_group_is_subgroup: LEMMA
       FORALL (G: (group?),y:(G)): is_finite(G) IMPLIES subgroup?(power_gen(y),G)


 

  END pred_algebra
