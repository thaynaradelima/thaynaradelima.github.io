(predCommutation
 (TC_TCC1 0
  (TC_TCC1-1 nil 3618145535
   ("" (skeep)
    (("" (expand IUnion)
      (("" (expand transitive?)
        (("" (skeep)
          (("" (skeep)
            (("" (skeep)
              (("" (inst 1 "i + i!1")
                (("" (lemma iterate_add)
                  (("" (inst?)
                    (("" (expand o)
                      (("" (assert)
                        (("" (decompose-equality)
                          (("" (inst -1 "(x_1, z)")
                            (("" (iff)
                              ((""
                                (prop)
                                ((""
                                  (inst 1 y)
                                  (("" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((IUnion const-decl "set[T]" indexed_sets nil)
    (iterate_add formula-decl nil relation_iterate orders)
    (T nonempty-type-decl nil predCommutation nil)
    (O const-decl "bool" relation_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (iterate def-decl "pred[[T, T]]" relation_iterate orders)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (pred type-eq-decl nil defined_types nil)
    (PRED type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (transitive? const-decl "bool" relations nil))
   shostak
   (TC subtype
    "indexed_sets[posnat, [predCommutation.T, predCommutation.T]].IUnion(LAMBDA (p: integers.posnat): relation_iterate[predCommutation.T].iterate(predCommutation.R, p))"
    "transitive")))
 (RTC_TCC1 0
  (RTC_TCC1-1 nil 3618249540
   ("" (skeep)
    (("" (expand reflexive_transitive?)
      (("" (prop)
        (("1" (expand reflexive?)
          (("1" (skeep)
            (("1" (expand IUnion)
              (("1" (inst 1 0) (("1" (grind) nil nil)) nil)) nil))
            nil))
          nil)
         ("2" (expand transitive?)
          (("2" (expand IUnion)
            (("2" (skeep)
              (("2" (skeep)
                (("2" (skeep)
                  (("2" (inst 1 "i + i!1")
                    (("2" (lemma iterate_add)
                      (("2" (inst?)
                        (("2" (expand o)
                          (("2" (decompose-equality)
                            (("2" (inst -1 "(x, z)")
                              (("2"
                                (iff)
                                (("2"
                                  (prop)
                                  (("1" (assert) nil nil)
                                   ("2"
                                    (assert)
                                    (("2"
                                      (inst 1 y)
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((reflexive_transitive? const-decl "bool" predCommutation nil)
    (transitive? const-decl "bool" relations nil)
    (iterate_add formula-decl nil relation_iterate orders)
    (O const-decl "bool" relation_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (PRED type-eq-decl nil defined_types nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (reflexive? const-decl "bool" relations nil)
    (IUnion const-decl "set[T]" indexed_sets nil)
    (T nonempty-type-decl nil predCommutation nil)
    (iterate def-decl "pred[[T, T]]" relation_iterate orders)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak
   (RTC subtype
    "indexed_sets[nat, [predCommutation.T, predCommutation.T]].IUnion(LAMBDA (n: naturalnumbers.nat): relation_iterate[predCommutation.T].iterate(predCommutation.R, n))"
    "reflexive_transitive")))
 (DP_IMPL_LC 0
  (DP_IMPL_LC-1 nil 3618140084
   ("" (skeep)
    (("" (expand* "LC?" "DP?")
      (("" (skeep)
        (("" (inst?)
          (("" (inst -1 "z")
            (("" (assert)
              (("" (skeep)
                (("" (inst 1 "u")
                  (("" (split)
                    (("1" (expand "RTC")
                      (("1" (expand "IUnion")
                        (("1" (inst 1 1)
                          (("1" (expand "iterate")
                            (("1" (expand "o")
                              (("1"
                                (inst 1 "y")
                                (("1"
                                  (expand "iterate")
                                  (("1" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "RTC")
                      (("2" (expand "IUnion")
                        (("2" (inst 1 1)
                          (("2" (expand "iterate")
                            (("2" (expand "o")
                              (("2"
                                (inst 1 "z")
                                (("2"
                                  (expand "iterate")
                                  (("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((DP? const-decl "bool" predCommutation nil)
    (LC? const-decl "bool" predCommutation nil)
    (T nonempty-type-decl nil predCommutation nil)
    (RTC const-decl "reflexive_transitive" predCommutation nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (O const-decl "bool" relation_props nil)
    (iterate def-decl "pred[[T, T]]" relation_iterate orders)
    (IUnion const-decl "set[T]" indexed_sets nil))
   shostak))
 (C_IMPL_LC 0
  (C_IMPL_LC-1 nil 3618140653
   ("" (skeep)
    (("" (expand* "C?" "LC?")
      (("" (skeep)
        (("" (inst?)
          (("" (inst?)
            (("" (prop)
              (("1" (hide -2 2)
                (("1" (expand* "RTC" "IUnion" "iterate")
                  (("1" (inst 1 1)
                    (("1" (assert)
                      (("1" (expand "iterate")
                        (("1" (expand "o") (("1" (inst 1 "x") nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide -1 2)
                (("2" (expand* "RTC" "IUnion" "iterate")
                  (("2" (inst 1 1)
                    (("2" (assert)
                      (("2" (expand "iterate")
                        (("2" (expand "o") (("2" (inst 1 "x") nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((LC? const-decl "bool" predCommutation nil)
    (C? const-decl "bool" predCommutation nil)
    (T nonempty-type-decl nil predCommutation nil)
    (IUnion const-decl "set[T]" indexed_sets nil)
    (iterate def-decl "pred[[T, T]]" relation_iterate orders)
    (RTC const-decl "reflexive_transitive" predCommutation nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (O const-decl "bool" relation_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (monotony_iterate 0
  (monotony_iterate-1 nil 3618182259
   ("" (induct "n")
    (("1" (skeep)
      (("1" (hide -)
        (("1" (expand "iterate")
          (("1" (expand* "subset?" "member") (("1" (skeep) nil nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (inst?)
          (("2" (expand "iterate" 1)
            (("2" (expand "o")
              (("2" (expand* 1 "subset?" "member")
                (("2" (skeep)
                  (("2" (skeep)
                    (("2" (inst 1 "y")
                      (("2" (prop)
                        (("1" (inst? -2)
                          (("1" (assert)
                            (("1" (inst? -1) (("1" (assert) nil nil))
                              nil))
                            nil))
                          nil)
                         ("2" (inst? -2) (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((O const-decl "bool" relation_props nil)
    (member const-decl "bool" sets nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (iterate def-decl "pred[[T, T]]" relation_iterate orders)
    (subset? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (T nonempty-type-decl nil predCommutation nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (monotony_TC 0
  (monotony_TC-1 nil 3618182815
   ("" (skeep)
    (("" (lemma "monotony_iterate")
      (("" (inst? -1)
        (("" (expand* "TC" "IUnion")
          (("" (expand "subset?")
            (("" (skeep)
              (("" (expand "member" 1)
                (("" (expand "member" -3)
                  (("" (skeep)
                    (("" (inst 1 "i")
                      (("" (inst -1 "i")
                        (("" (prop)
                          (("" (inst? -1)
                            (("" (expand "member")
                              (("" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((monotony_iterate formula-decl nil predCommutation nil)
    (IUnion const-decl "set[T]" indexed_sets nil)
    (TC const-decl "transitive" predCommutation nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (member const-decl "bool" sets nil)
    (subset? const-decl "bool" sets nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T nonempty-type-decl nil predCommutation nil))
   shostak))
 (monotony_RTC 0
  (monotony_RTC-3 nil 3696765976
   ("" (skeep)
    (("" (expand* "subset?" "member")
      (("" (skeep)
        (("" (lemma "monotony_iterate")
          (("" (expand "RTC")
            (("" (expand "IUnion")
              (("" (skeep)
                (("" (inst 1 "i")
                  (("" (inst -1 "R1" "R2" "i")
                    (("" (prop)
                      (("1" (expand "subset?")
                        (("1" (inst?)
                          (("1" (expand "member")
                            (("1" (assert) nil nil)) nil))
                          nil))
                        nil)
                       ("2" (expand "subset?")
                        (("2" (hide-all-but (-1 1))
                          (("2" (skeep)
                            (("2" (inst -2 "x!1")
                              (("2"
                                (assert)
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((member const-decl "bool" sets nil)
    (subset? const-decl "bool" sets nil)
    (monotony_iterate formula-decl nil predCommutation nil)
    (IUnion const-decl "set[T]" indexed_sets nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T nonempty-type-decl nil predCommutation nil)
    (PRED type-eq-decl nil defined_types nil)
    (RTC const-decl "reflexive_transitive" predCommutation nil))
   nil)
  (monotony_RTC-2 nil 3695572303
   ("" (skeep)
    (("" (expand* "subset?" "member")
      (("" (skeep)
        (("" (lemma "monotony_iterate")
          (("" (expand "RTC")
            (("" (expand "IUnion")
              (("" (skeep)
                (("" (inst 1 "i")
                  (("" (inst -1 "R1" "R2" "i")
                    (("" (prop)
                      (("1" (expand "subset?")
                        (("1" (inst?)
                          (("1" (expand "member")
                            (("1" (assert) nil nil)) nil))
                          nil))
                        nil)
                       ("2" (expand "subset?")
                        (("2" (hide-all-but (-1 1))
                          (("2" (skeep)
                            (("2" (inst -2 "x!1")
                              (("2"
                                (assert)
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((RTC const-decl "reflexive_transitive" predCommutation nil)
    (PRED type-eq-decl nil defined_types nil)
    (T nonempty-type-decl nil predCommutation nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (IUnion const-decl "set[T]" indexed_sets nil)
    (monotony_iterate formula-decl nil predCommutation nil)
    (subset? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil))
   nil)
  (monotony_RTC-1 nil 3618268294
   ("" (skeep)
    (("" (expand* subset? member)
      (("" (skeep)
        (("" (lemma monotony_iterate)
          (("" (expand RTC)
            (("" (expand IUnion)
              (("" (skeep)
                (("" (inst 1 i)
                  (("" (inst -1 R1 R2 i)
                    (("" (prop)
                      (("1" (expand subset?)
                        (("1" (inst?)
                          (("1" (expand member)
                            (("1" (assert) nil nil)) nil))
                          nil))
                        nil)
                       ("2" (expand subset?)
                        (("2" (hide-all-but (-1 1))
                          (("2" (skeep)
                            (("2" (inst -2 x!1)
                              (("2"
                                (assert)
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((member const-decl "bool" sets nil)
    (subset? const-decl "bool" sets nil)
    (monotony_iterate formula-decl nil predCommutation nil)
    (IUnion const-decl "set[T]" indexed_sets nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (T nonempty-type-decl nil predCommutation nil)
    (PRED type-eq-decl nil defined_types nil)
    (RTC const-decl "reflexive_transitive" predCommutation nil))
   shostak))
 (iterate_one 0
  (iterate_one-1 nil 3618243345
   ("" (skeep)
    (("" (expand "iterate")
      (("" (expand "iterate")
        (("" (expand "o")
          (("" (decompose-equality)
            (("" (iff)
              (("" (prop)
                (("1" (skeep)
                  (("1" (replace -1) (("1" (propax) nil nil)) nil))
                  nil)
                 ("2" (inst?) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((iterate def-decl "pred[[T, T]]" relation_iterate orders)
    (O const-decl "bool" relation_props nil)
    (T nonempty-type-decl nil predCommutation nil)
    (boolean nonempty-type-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil))
   shostak))
 (iterate_addition 0
  (iterate_addition-3 nil 3696782794
   ("" (induct "n")
    (("1" (skeep)
      (("1" (expand "iterate" 1 3)
        (("1" (expand "o")
          (("1" (decompose-equality)
            (("1" (iff)
              (("1" (prop)
                (("1" (inst?) nil nil)
                 ("2" (skeep)
                  (("2" (replace -2) (("2" (propax) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (expand iterate + (1 3))
          (("2" (inst?)
            (("2" (rewrite "assoc" :dir rl)
              (("2" (replace -1 1 rl) (("2" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (assoc formula-decl nil relation_props2 nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (O const-decl "bool" relation_props nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (iterate def-decl "pred[[T, T]]" relation_iterate orders)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (PRED type-eq-decl nil defined_types nil)
    (T nonempty-type-decl nil predCommutation nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil)
  (iterate_addition-2 nil 3695572899
   ("" (induct "n")
    (("1" (skeep)
      (("1" (expand "iterate" 1 3)
        (("1" (expand "o")
          (("1" (decompose-equality)
            (("1" (iff)
              (("1" (prop)
                (("1" (inst?) nil nil)
                 ("2" (skeep)
                  (("2" (replace -2) (("2" (propax) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (expand iterate + (1 3))
          (("2" (inst?)
            (("2" (rewrite "assoc" :dir rl)
              (("2" (replace -1 1 rl) (("2" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (assoc formula-decl nil relation_props2 nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (O const-decl "bool" relation_props nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (iterate def-decl "pred[[T, T]]" relation_iterate orders)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (PRED type-eq-decl nil defined_types nil)
    (T nonempty-type-decl nil predCommutation nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil)
  (iterate_addition-1 nil 3618241407
   ("" (induct "n")
    (("1" (skeep)
      (("1" (expand iterate 1 3)
        (("1" (expand o)
          (("1" (assert)
            (("1" (decompose-equality)
              (("1" (iff)
                (("1" (prop)
                  (("1" (inst 1 x!2) nil nil)
                   ("2" (skeep)
                    (("2" (replace -2) (("2" (propax) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (expand iterate + (1 3))
          (("2" (inst?)
            (("2" (rewrite "assoc" :dir rl)
              (("2" (replace -1 1 rl) (("2" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (assoc formula-decl nil relation_props2 nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (O const-decl "bool" relation_props nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (iterate def-decl "pred[[T, T]]" relation_iterate orders)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (PRED type-eq-decl nil defined_types nil)
    (T nonempty-type-decl nil predCommutation nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   shostak))
 (TC_in_RTC 0
  (TC_in_RTC-3 nil 3696782856
   ("" (skeep)
    (("" (expand* "subset?" "member")
      (("" (skeep)
        (("" (expand* "TC" "RTC")
          (("" (expand "IUnion")
            (("" (skeep) (("" (inst 1 "i") nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((member const-decl "bool" sets nil)
    (subset? const-decl "bool" sets nil)
    (RTC const-decl "reflexive_transitive" predCommutation nil)
    (TC const-decl "transitive" predCommutation nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (IUnion const-decl "set[T]" indexed_sets nil))
   nil)
  (TC_in_RTC-2 nil 3695573267
   ("" (skeep)
    (("" (expand* "subset?" "member")
      (("" (skeep)
        (("" (expand* "TC" "RTC")
          (("" (expand "IUnion")
            (("" (skeep) (("" (inst 1 "i") nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((IUnion const-decl "set[T]" indexed_sets nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (TC const-decl "transitive" predCommutation nil)
    (RTC const-decl "reflexive_transitive" predCommutation nil)
    (subset? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil))
   nil)
  (TC_in_RTC-1 nil 3618267858
   ("" (skeep)
    (("" (expand* subset? member)
      (("" (skeep)
        (("" (expand* TC RTC)
          (("" (expand IUnion)
            (("" (skeep) (("" (inst 1 i) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((member const-decl "bool" sets nil)
    (subset? const-decl "bool" sets nil)
    (RTC const-decl "reflexive_transitive" predCommutation nil)
    (TC const-decl "transitive" predCommutation nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (IUnion const-decl "set[T]" indexed_sets nil))
   shostak))
 (RTC_in_EC 0
  (RTC_in_EC-2 nil 3695573394
   ("" (lemma "monotony_iterate")
    (("" (skeep)
      (("" (expand "EC")
        (("" (expand "RTC" 1)
          (("" (expand "TC" 1)
            (("" (expand "subset?")
              (("" (expand "member")
                (("" (skeep)
                  (("" (expand "IUnion")
                    (("" (skeep)
                      (("" (inst 1 "i")
                        (("1" (inst -1 "R" "SC(R)" "i")
                          (("1" (prop)
                            (("1" (inst -1 "x_1")
                              (("1" (assert) nil nil)) nil)
                             ("2" (hide-all-but 1)
                              (("2"
                                (skeep)
                                (("2"
                                  (expand "SC")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide -1)
                          (("2" (case "i = 0")
                            (("1" (replace -1)
                              (("1"
                                (expand "iterate")
                                (("1" (propax) nil nil))
                                nil))
                              nil)
                             ("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((RTC const-decl "reflexive_transitive" predCommutation nil)
    (subset? const-decl "bool" sets nil)
    (iterate def-decl "pred[[T, T]]" relation_iterate orders)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (SC const-decl "bool" predCommutation nil)
    (PRED type-eq-decl nil defined_types nil)
    (T nonempty-type-decl nil predCommutation nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (i skolem-const-decl "nat" predCommutation nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (IUnion const-decl "set[T]" indexed_sets nil)
    (member const-decl "bool" sets nil)
    (TC const-decl "transitive" predCommutation nil)
    (EC const-decl "bool" predCommutation nil)
    (monotony_iterate formula-decl nil predCommutation nil))
   nil)
  (RTC_in_EC-1 nil 3618251004
   ("" (lemma monotony_iterate)
    (("" (skeep)
      (("" (expand EC)
        (("" (expand RTC 1)
          (("" (expand TC 1)
            (("" (expand subset?)
              (("" (expand member)
                (("" (skeep)
                  (("" (expand IUnion)
                    (("" (skeep)
                      (("" (inst 1 i)
                        (("1" (inst -1 R "SC(R)" i)
                          (("1" (prop)
                            (("1" (inst -1 x_1)
                              (("1" (assert) nil nil)) nil)
                             ("2" (hide-all-but 1)
                              (("2"
                                (skeep)
                                (("2"
                                  (expand SC)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide -1)
                          (("2" (case "i = 0")
                            (("1" (replace -1)
                              (("1"
                                (expand iterate)
                                (("1" (propax) nil nil))
                                nil))
                              nil)
                             ("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((RTC const-decl "reflexive_transitive" predCommutation nil)
    (subset? const-decl "bool" sets nil)
    (iterate def-decl "pred[[T, T]]" relation_iterate orders)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (SC const-decl "bool" predCommutation nil)
    (PRED type-eq-decl nil defined_types nil)
    (T nonempty-type-decl nil predCommutation nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (IUnion const-decl "set[T]" indexed_sets nil)
    (member const-decl "bool" sets nil)
    (TC const-decl "transitive" predCommutation nil)
    (EC const-decl "bool" predCommutation nil)
    (monotony_iterate formula-decl nil predCommutation nil))
   shostak))
 (TC_in_EC 0
  (TC_in_EC-2 nil 3695573745
   ("" (lemma "TC_in_RTC")
    (("" (lemma "RTC_in_EC")
      (("" (skeep)
        (("" (inst?)
          (("" (inst?)
            (("" (expand* "subset?" "member")
              (("" (skeep)
                (("" (inst?) (("" (inst?) (("" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((RTC_in_EC formula-decl nil predCommutation nil)
    (T nonempty-type-decl nil predCommutation nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (member const-decl "bool" sets nil)
    (subset? const-decl "bool" sets nil)
    (TC_in_RTC formula-decl nil predCommutation nil))
   nil)
  (TC_in_EC-1 nil 3618186320
   ("" (lemma TC_in_RTC)
    (("" (lemma RTC_in_EC)
      (("" (skeep)
        (("" (inst?)
          (("" (inst?)
            (("" (expand* subset? member)
              (("" (skeep)
                (("" (inst?) (("" (inst?) (("" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((RTC_in_EC formula-decl nil predCommutation nil)
    (T nonempty-type-decl nil predCommutation nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (member const-decl "bool" sets nil)
    (subset? const-decl "bool" sets nil)
    (TC_in_RTC formula-decl nil predCommutation nil))
   shostak))
 (iterate_SC 0
  (iterate_SC-2 nil 3695573952
   ("" (induct "n")
    (("1" (skeep)
      (("1" (expand "iterate")
        (("1" (iff)
          (("1" (prop) (("1" (assert) nil nil) ("2" (assert) nil nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (inst?)
          (("2" (lemma "iterate_addition")
            (("2" (inst -1 "SC(R)" "j" 1)
              (("2" (lemma "iterate_addition")
                (("2" (inst -1 "SC(R)" 1 "j")
                  (("2" (decompose-equality)
                    (("2" (decompose-equality)
                      (("2" (expand iterate 1 1)
                        (("2" (inst -1 "(x,y)")
                          (("2" (inst -2 "(y,x)")
                            (("2" (replace -2 1)
                              (("2"
                                (expand o 1)
                                (("2"
                                  (expand o -1)
                                  (("2"
                                    (iff -1)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (prop)
                                        (("1"
                                          (skeep)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (iff 1)
                                              (("1"
                                                (prop)
                                                (("1"
                                                  (inst 1 "y_1")
                                                  (("1"
                                                    (prop)
                                                    (("1"
                                                      (hide-all-but
                                                       (-4 1))
                                                      (("1"
                                                        (lemma
                                                         "iterate_one")
                                                        (("1"
                                                          (copy -1)
                                                          (("1"
                                                            (inst?)
                                                            (("1"
                                                              (replace
                                                               -1)
                                                              (("1"
                                                                (hide
                                                                 -1
                                                                 -2)
                                                                (("1"
                                                                  (expand
                                                                   "SC")
                                                                  (("1"
                                                                    (prop)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (inst
                                                       -6
                                                       "x"
                                                       "y_1")
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (inst 1 "y_1")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (hide-all-but
                                                       (-4 1))
                                                      (("2"
                                                        (rewrite
                                                         "iterate_one")
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (expand "o" -1)
                                          (("2"
                                            (iff)
                                            (("2"
                                              (prop)
                                              (("1"
                                                (skeep -1)
                                                (("1"
                                                  (inst 1 "y_1")
                                                  (("1"
                                                    (prop)
                                                    (("1"
                                                      (hide-all-but
                                                       (-2 -5 1))
                                                      (("1"
                                                        (inst
                                                         -2
                                                         "y_1"
                                                         "x")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (lemma
                                                       "iterate_one")
                                                      (("2"
                                                        (inst?)
                                                        (("2"
                                                          (replace
                                                           -1
                                                           -2)
                                                          (("2"
                                                            (hide-all-but
                                                             (-2 1))
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (skeep)
                                                (("2"
                                                  (inst 1 "y_1")
                                                  (("2"
                                                    (prop)
                                                    (("1"
                                                      (rewrite
                                                       "iterate_one")
                                                      (("1"
                                                        (hide-all-but
                                                         (-2 1))
                                                        (("1"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide 2 3 4 5)
                                                      (("2"
                                                        (inst
                                                         -3
                                                         "x"
                                                         "y_1")
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((iterate_one formula-decl nil predCommutation nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (O const-decl "bool" relation_props nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (iterate_addition formula-decl nil predCommutation nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (SC const-decl "bool" predCommutation nil)
    (iterate def-decl "pred[[T, T]]" relation_iterate orders)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (PRED type-eq-decl nil defined_types nil)
    (T nonempty-type-decl nil predCommutation nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil)
  (iterate_SC-1 nil 3618187433
   ("" (induct n)
    (("1" (skeep)
      (("1" (expand iterate)
        (("1" (assert)
          (("1" (iff)
            (("1" (prop)
              (("1" (assert) nil nil) ("2" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (inst?)
          (("2" (lemma iterate_addition)
            (("2" (inst -1 "SC(R)" j 1)
              (("2" (lemma iterate_addition)
                (("2" (inst -1 "SC(R)" 1 j)
                  (("2" (decompose-equality)
                    (("2" (decompose-equality)
                      (("2" (expand iterate 1 1)
                        (("2" (inst -1 "(x,y)")
                          (("2" (inst -2 "(y,x)")
                            (("2" (replace -2 1)
                              (("2"
                                (expand o 1)
                                (("2"
                                  (expand o -1)
                                  (("2"
                                    (iff -1)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (prop)
                                        (("1"
                                          (skeep)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (iff 1)
                                              (("1"
                                                (prop)
                                                (("1"
                                                  (inst 1 y_1)
                                                  (("1"
                                                    (prop)
                                                    (("1"
                                                      (hide-all-but
                                                       (-4 1))
                                                      (("1"
                                                        (lemma
                                                         iterate_one)
                                                        (("1"
                                                          (copy -1)
                                                          (("1"
                                                            (inst?)
                                                            (("1"
                                                              (replace
                                                               -1)
                                                              (("1"
                                                                (hide
                                                                 -1
                                                                 -2)
                                                                (("1"
                                                                  (expand
                                                                   SC)
                                                                  (("1"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (inst -6 x y_1)
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (inst 1 y_1)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (hide-all-but
                                                       (-4 1))
                                                      (("2"
                                                        (rewrite
                                                         iterate_one)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (expand o -1)
                                          (("2"
                                            (iff)
                                            (("2"
                                              (prop)
                                              (("1"
                                                (skeep -1)
                                                (("1"
                                                  (inst 1 y_1)
                                                  (("1"
                                                    (prop)
                                                    (("1"
                                                      (hide-all-but
                                                       (-2 -5 1))
                                                      (("1"
                                                        (inst -2 y_1 x)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (lemma
                                                       iterate_one)
                                                      (("2"
                                                        (inst?)
                                                        (("2"
                                                          (replace
                                                           -1
                                                           -2)
                                                          (("2"
                                                            (hide-all-but
                                                             (-2 1))
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (skeep)
                                                (("2"
                                                  (inst 1 y_1)
                                                  (("2"
                                                    (prop)
                                                    (("1"
                                                      (rewrite
                                                       iterate_one)
                                                      (("1"
                                                        (hide-all-but
                                                         (-2 1))
                                                        (("1"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide 2 3 4 5)
                                                      (("2"
                                                        (inst -3 x y_1)
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((iterate_one formula-decl nil predCommutation nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (O const-decl "bool" relation_props nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (iterate_addition formula-decl nil predCommutation nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (SC const-decl "bool" predCommutation nil)
    (iterate def-decl "pred[[T, T]]" relation_iterate orders)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (PRED type-eq-decl nil defined_types nil)
    (T nonempty-type-decl nil predCommutation nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (symmetry_SC 0
  (symmetry_SC-1 nil 3696619495
   ("" (skeep)
    (("" (expand "symmetric?")
      (("" (skeep) (("" (expand "SC") (("" (prop) nil nil)) nil)) nil))
      nil))
    nil)
   ((symmetric? const-decl "bool" relations nil)
    (SC const-decl "bool" predCommutation nil))
   shostak))
 (EC_symmetric 0
  (EC_symmetric-1 nil 3618184947
   ("" (skeep)
    (("" (expand "EC")
      (("" (expand "TC")
        (("" (expand "IUnion")
          (("" (decompose-equality)
            (("" (iff)
              (("" (prop)
                (("1" (expand "Inv")
                  (("1" (skeep)
                    (("1" (inst 1 "i")
                      (("1" (rewrite "iterate_SC") nil nil)) nil))
                    nil))
                  nil)
                 ("2" (replace -1)
                  (("2" (hide -)
                    (("2" (assert)
                      (("2" (expand "Inv") (("2" (propax) nil nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (assert)
                  (("3" (expand "Inv")
                    (("3" (lemma "iterate_SC")
                      (("3" (inst?)
                        (("3" (inst?)
                          (("3" (skeep)
                            (("3" (inst -1 "x!1" "i")
                              (("3"
                                (assert)
                                (("3"
                                  (inst?)
                                  (("3" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((EC const-decl "bool" predCommutation nil)
    (IUnion const-decl "set[T]" indexed_sets nil)
    (iterate_SC formula-decl nil predCommutation nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T nonempty-type-decl nil predCommutation nil)
    (Inv const-decl "bool" predCommutation nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (SC const-decl "bool" predCommutation nil)
    (PRED type-eq-decl nil defined_types nil)
    (iterate def-decl "pred[[T, T]]" relation_iterate orders)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TC const-decl "transitive" predCommutation nil))
   shostak))
 (CR_IMPL_C 0
  (CR_IMPL_C-1 nil 3618183615
   ("" (skeep)
    (("" (expand C?)
      (("" (skeep)
        (("" (expand CR?)
          (("" (inst -1 y z)
            (("" (assert)
              (("" (prop)
                (("" (lemma RTC_in_EC)
                  (("" (inst?)
                    (("" (expand* subset? member)
                      (("" (inst -1 "(x, z)")
                        (("" (assert)
                          (("" (hide -3 2)
                            (("" (lemma RTC_in_EC)
                              ((""
                                (inst?)
                                ((""
                                  (expand* subset? member)
                                  ((""
                                    (inst -1 "(x, y)")
                                    ((""
                                      (assert)
                                      ((""
                                        (hide -3)
                                        ((""
                                          (lemma EC_symmetric)
                                          ((""
                                            (inst?)
                                            ((""
                                              (replace -1 -2)
                                              ((""
                                                (hide -1)
                                                ((""
                                                  (expand Inv)
                                                  ((""
                                                    (expand EC)
                                                    ((""
                                                      (expand TC)
                                                      ((""
                                                        (expand IUnion)
                                                        ((""
                                                          (skeep)
                                                          ((""
                                                            (prop)
                                                            (("1"
                                                              (skolem
                                                               -1
                                                               j)
                                                              (("1"
                                                                (inst
                                                                 1
                                                                 "i+j")
                                                                (("1"
                                                                  (lemma
                                                                   iterate_addition)
                                                                  (("1"
                                                                    (inst?)
                                                                    (("1"
                                                                      (decompose-equality)
                                                                      (("1"
                                                                        (inst
                                                                         -1
                                                                         "(y,z)")
                                                                        (("1"
                                                                          (expand
                                                                           o)
                                                                          (("1"
                                                                            (iff)
                                                                            (("1"
                                                                              (prop)
                                                                              (("1"
                                                                                (inst
                                                                                 1
                                                                                 x)
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (replace
                                                               -1)
                                                              (("2"
                                                                (inst
                                                                 1
                                                                 i)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((C? const-decl "bool" predCommutation nil)
    (CR? const-decl "bool" predCommutation nil)
    (RTC_in_EC formula-decl nil predCommutation nil)
    (member const-decl "bool" sets nil)
    (subset? const-decl "bool" sets nil)
    (EC_symmetric formula-decl nil predCommutation nil)
    (Inv const-decl "bool" predCommutation nil)
    (TC const-decl "transitive" predCommutation nil)
    (iterate_addition formula-decl nil predCommutation nil)
    (O const-decl "bool" relation_props nil)
    (iterate def-decl "pred[[T, T]]" relation_iterate orders)
    (pred type-eq-decl nil defined_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (SC const-decl "bool" predCommutation nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (IUnion const-decl "set[T]" indexed_sets nil)
    (EC const-decl "bool" predCommutation nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T nonempty-type-decl nil predCommutation nil))
   shostak))
 (Aux_C_CR 0
  (Aux_C_CR-3 nil 3696682983
   ("" (induct "i")
    (("1" (skeep)
      (("1" (expand "iterate")
        (("1" (replace -2)
          (("1" (hide -)
            (("1" (expand "Joinable")
              (("1" (inst 1 "y")
                (("1" (split)
                  (("1" (expand* "RTC" "IUnion" "iterate")
                    (("1" (inst 1 0) nil nil)) nil)
                   ("2" (expand* "RTC" "IUnion" "iterate")
                    (("2" (inst 1 0) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (lemma "iterate_addition")
          (("2" (inst?)
            (("2" (replace -1 -4)
              (("2" (hide -1)
                (("2" (expand "o" -3)
                  (("2" (skeep -3)
                    (("2" (inst -1 "R" "x" "y_1")
                      (("2" (assert)
                        (("2" (expand "Joinable" -1)
                          (("2" (skeep -1)
                            (("2" (rewrite "iterate_one")
                              (("2"
                                (expand "SC" -5)
                                (("2"
                                  (split)
                                  (("1"
                                    (expand "C?")
                                    (("1"
                                      (inst -4 "y_1" "z" "y")
                                      (("1"
                                        (prop)
                                        (("1"
                                          (expand "Joinable" 1)
                                          (("1"
                                            (skeep)
                                            (("1"
                                              (inst 1 "u")
                                              (("1"
                                                (prop)
                                                (("1"
                                                  (hide-all-but
                                                   (-4 -1 1))
                                                  (("1"
                                                    (expand "RTC")
                                                    (("1"
                                                      (expand "IUnion")
                                                      (("1"
                                                        (skeep)
                                                        (("1"
                                                          (skolem!
                                                           -2
                                                           "j")
                                                          (("1"
                                                            (lemma
                                                             "iterate_addition")
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "R"
                                                               "i!1"
                                                               "i")
                                                              (("1"
                                                                (inst
                                                                 1
                                                                 "i!1+i")
                                                                (("1"
                                                                  (replace
                                                                   -1
                                                                   1)
                                                                  (("1"
                                                                    (expand
                                                                     "o")
                                                                    (("1"
                                                                      (inst
                                                                       1
                                                                       "z")
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide-all-but (-1 1))
                                          (("2"
                                            (expand* "RTC" "IUnion")
                                            (("2"
                                              (inst 1 1)
                                              (("2"
                                                (rewrite "iterate_one")
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (typepred "RTC(R)")
                                    (("2"
                                      (expand "reflexive_transitive?")
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (hide -1)
                                          (("2"
                                            (expand "transitive?")
                                            (("2"
                                              (case "RTC(R)(y,y_1)")
                                              (("1"
                                                (inst -2 "y" "y_1" "z")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand "Joinable")
                                                    (("1"
                                                      (inst 1 "z")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide-all-but (-2 1))
                                                (("2"
                                                  (expand*
                                                   "RTC"
                                                   "IUnion")
                                                  (("2"
                                                    (inst 1 1)
                                                    (("2"
                                                      (rewrite
                                                       "iterate_one")
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((iterate_addition formula-decl nil predCommutation nil)
    (O const-decl "bool" relation_props nil)
    (iterate_one formula-decl nil predCommutation nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (transitive? const-decl "bool" relations nil)
    (reflexive_transitive type-eq-decl nil predCommutation nil)
    (reflexive_transitive? const-decl "bool" predCommutation nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (RTC const-decl "reflexive_transitive" predCommutation nil)
    (IUnion const-decl "set[T]" indexed_sets nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (Joinable const-decl "bool" predCommutation nil)
    (SC const-decl "bool" predCommutation nil)
    (iterate def-decl "pred[[T, T]]" relation_iterate orders)
    (C? const-decl "bool" predCommutation nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (T nonempty-type-decl nil predCommutation nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil)
  (Aux_C_CR-2 nil 3696682853
   ("" (induct "i")
    (("1" (skeep)
      (("1" (expand "iterate")
        (("1" (replace -2)
          (("1" (hide -)
            (("1" (expand "Joinable")
              (("1" (inst 1 "y")
                (("1" (split)
                  (("1" (expand* "RTC" "IUnion" "iterate")
                    (("1" (inst 1 0) nil)))
                   ("2" (expand* "RTC" "IUnion" "iterate")
                    (("2" (inst 1 0) nil)))))))))))))))))
     ("2" (skeep)
      (("2" (skeep)
        (("2" (lemma "iterate_addition")
          (("2" (inst?)
            (("2" (replace -1 -4)
              (("2" (hide -1)
                (("2" (expand "o" -3)
                  (("2" (skeep -3)
                    (("2" (inst -1 "R" "x" "y_1")
                      (("2" (assert)
                        (("2" (expand "Joinable" -1)
                          (("2" (skeep -1)
                            (("2" (rewrite "iterate_one")
                              (("2"
                                (expand "SC" -5)
                                (("2"
                                  (split)
                                  (("1"
                                    (expand "C?")
                                    (("1"
                                      (inst -4 "y_1" "z" "y")
                                      (("1"
                                        (prop)
                                        (("1"
                                          (expand "Joinable" 1)
                                          (("1"
                                            (skeep)
                                            (("1"
                                              (inst 1 "u")
                                              (("1"
                                                (prop)
                                                (("1"
                                                  (hide-all-but
                                                   (-4 -1 1))
                                                  (("1"
                                                    (expand "RTC")
                                                    (("1"
                                                      (expand "IUnion")
                                                      (("1"
                                                        (skeep)
                                                        (("1"
                                                          (skolem!
                                                           -2
                                                           "j")
                                                          (("1"
                                                            (lemma
                                                             "iterate_addition")
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "R"
                                                               "i!1"
                                                               "i")
                                                              (("1"
                                                                (inst
                                                                 1
                                                                 "i!1+i")
                                                                (("1"
                                                                  (replace
                                                                   -1
                                                                   1)
                                                                  (("1"
                                                                    (expand
                                                                     "o")
                                                                    (("1"
                                                                      (inst
                                                                       1
                                                                       "z")
                                                                      (("1"
                                                                        (assert)
                                                                        nil)))))))))))))))))))))))))))))))
                                         ("2"
                                          (hide-all-but (-1 1))
                                          (("2"
                                            (expand* "RTC" "IUnion")
                                            (("2"
                                              (inst 1 1)
                                              (("2"
                                                (rewrite "iterate_one")
                                                nil)))))))))))))
                                   ("2"
                                    (typepred "RTC(R)")
                                    (("2"
                                      (expand "reflexive_transitive?")
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (hide -1)
                                          (("2"
                                            (expand "transitive?")
                                            (("2"
                                              (case "RTC(R)(y,y_1)")
                                              (("1"
                                                (inst -2 "y" "y_1" "z")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand "Joinable")
                                                    (("1"
                                                      (inst 1 "z")
                                                      (("1"
                                                        (assert)
                                                        nil)))))))))
                                               ("2"
                                                (hide-all-but (-2 1))
                                                (("2"
                                                  (expand*
                                                   "RTC"
                                                   "IUnion")
                                                  (("2"
                                                    (inst 1 1)
                                                    (("2"
                                                      (rewrite
                                                       "iterate_one")
                                                      nil))))))))))))))))))))))))))))))))))))))))))))))))))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (T nonempty-type-decl nil predCommutation nil)
    (PRED type-eq-decl nil defined_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (C? const-decl "bool" predCommutation nil)
    (iterate def-decl "pred[[T, T]]" relation_iterate orders)
    (SC const-decl "bool" predCommutation nil)
    (Joinable const-decl "bool" predCommutation nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (IUnion const-decl "set[T]" indexed_sets nil)
    (RTC const-decl "reflexive_transitive" predCommutation nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (reflexive_transitive? const-decl "bool" predCommutation nil)
    (reflexive_transitive type-eq-decl nil predCommutation nil)
    (transitive? const-decl "bool" relations nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (iterate_one formula-decl nil predCommutation nil)
    (O const-decl "bool" relation_props nil)
    (iterate_addition formula-decl nil predCommutation nil))
   nil)
  (Aux_C_CR-1 nil 3618248593
   ("" (induct "i")
    (("1" (skeep)
      (("1" (expand "iterate")
        (("1" (replace -2)
          (("1" (hide -)
            (("1" (expand "Joinable")
              (("1" (inst 1 "y")
                (("1" (split)
                  (("1" (expand* "RTC" "IUnion" "iterate")
                    (("1" (inst 1 0) nil nil)) nil)
                   ("2" (expand* "RTC" "IUnion" "iterate")
                    (("2" (inst 1 0) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (lemma "iterate_addition")
          (("2" (inst?)
            (("2" (replace -1 -4)
              (("2" (hide -1)
                (("2" (expand "o" -3)
                  (("2" (skeep -3)
                    (("2" (inst -1 "R" "x" "y_1")
                      (("2" (assert)
                        (("2" (expand "Joinable" -1)
                          (("2" (skeep -1)
                            (("2" (rewrite "iterate_one")
                              (("2"
                                (expand "SC" -5)
                                (("2"
                                  (split)
                                  (("1"
                                    (expand "C?")
                                    (("1"
                                      (inst -4 "y_1" "z" "y")
                                      (("1"
                                        (prop)
                                        (("1"
                                          (expand "Joinable" 1)
                                          (("1"
                                            (skeep)
                                            (("1"
                                              (inst 1 "u")
                                              (("1"
                                                (prop)
                                                (("1"
                                                  (hide-all-but
                                                   (-4 -1 1))
                                                  (("1"
                                                    (expand "RTC")
                                                    (("1"
                                                      (expand "IUnion")
                                                      (("1"
                                                        (skeep)
                                                        (("1"
                                                          (skolem!
                                                           -2
                                                           "j")
                                                          (("1"
                                                            (lemma
                                                             "iterate_addition")
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "R"
                                                               "i!1"
                                                               "i")
                                                              (("1"
                                                                (inst
                                                                 1
                                                                 "i!1+i")
                                                                (("1"
                                                                  (replace
                                                                   -1
                                                                   1)
                                                                  (("1"
                                                                    (expand
                                                                     "o")
                                                                    (("1"
                                                                      (inst
                                                                       1
                                                                       "z")
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide-all-but (-1 1))
                                          (("2"
                                            (expand* "RTC" "IUnion")
                                            (("2"
                                              (inst 1 1)
                                              (("2"
                                                (rewrite "iterate_one")
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (typepred "RTC(R)")
                                    (("2"
                                      (expand "reflexive_transitive?")
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (hide -1)
                                          (("2"
                                            (expand "transitive?")
                                            (("2"
                                              (case "RTC(R)(y,y_1)")
                                              (("1"
                                                (inst -2 "y" "y_1" "z")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand "Joinable")
                                                    (("1"
                                                      (inst 1 "z")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide-all-but (-2 1))
                                                (("2"
                                                  (expand*
                                                   "RTC"
                                                   "IUnion")
                                                  (("2"
                                                    (inst 1 1)
                                                    (("2"
                                                      (rewrite
                                                       "iterate_one")
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (T nonempty-type-decl nil predCommutation nil)
    (PRED type-eq-decl nil defined_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (C? const-decl "bool" predCommutation nil)
    (iterate def-decl "pred[[T, T]]" relation_iterate orders)
    (SC const-decl "bool" predCommutation nil)
    (Joinable const-decl "bool" predCommutation nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (IUnion const-decl "set[T]" indexed_sets nil)
    (RTC const-decl "reflexive_transitive" predCommutation nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (reflexive_transitive? const-decl "bool" predCommutation nil)
    (reflexive_transitive type-eq-decl nil predCommutation nil)
    (transitive? const-decl "bool" relations nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (iterate_one formula-decl nil predCommutation nil)
    (O const-decl "bool" relation_props nil)
    (iterate_addition formula-decl nil predCommutation nil))
   shostak))
 (C_IMPL_CR 0
  (C_IMPL_CR-1 nil 3618247753
   ("" (skeep)
    (("" (lemma Aux_C_CR)
      (("" (expand CR? 1)
        (("" (skeep)
          (("" (expand EC)
            (("" (expand TC)
              (("" (expand IUnion)
                (("" (prop)
                  (("1" (skeep)
                    (("1" (inst? -2)
                      (("1" (assert)
                        (("1" (expand Joinable)
                          (("1" (propax) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("2" (inst 1 x)
                    (("2" (replace -1)
                      (("2" (hide -)
                        (("2" (prop)
                          (("1" (expand RTC)
                            (("1" (expand IUnion)
                              (("1"
                                (inst 1 0)
                                (("1"
                                  (expand iterate)
                                  (("1" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (grind)
                            (("2" (inst 1 0) (("2" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Aux_C_CR formula-decl nil predCommutation nil)
    (TC const-decl "transitive" predCommutation nil)
    (T nonempty-type-decl nil predCommutation nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (Joinable const-decl "bool" predCommutation nil)
    (iterate def-decl "pred[[T, T]]" relation_iterate orders)
    (RTC const-decl "reflexive_transitive" predCommutation nil)
    (IUnion const-decl "set[T]" indexed_sets nil)
    (EC const-decl "bool" predCommutation nil)
    (CR? const-decl "bool" predCommutation nil))
   shostak))
 (C_eq_CR 0
  (C_eq_CR-1 nil 3618269893
   ("" (lemma CR_IMPL_C)
    (("" (lemma C_IMPL_CR)
      (("" (skeep)
        (("" (inst?) (("" (inst?) (("" (prop) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((C_IMPL_CR formula-decl nil predCommutation nil)
    (T nonempty-type-decl nil predCommutation nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (CR_IMPL_C formula-decl nil predCommutation nil))
   shostak))
 (NewmanLemma 0
  (NewmanLemma-3 nil 3699556134
   ("" (lemma noetherian_induction)
    (("" (skeep)
      (("" (prop)
        (("1" (rewrite "C_IMPL_LC") nil nil)
         ("2" (expand C?)
          (("2"
            (inst -2 "R"
             "LAMBDA(a:T): (FORALL(b,c:T) : RTC(R)(a, b) AND RTC(R)(a, c) IMPLIES EXISTS (d:T) : RTC(R)(b, d) AND RTC(R)(c, d))")
            (("1" (prop)
              (("1" (skeep)
                (("1" (inst -1 x)
                  (("1" (inst?) (("1" (assert) nil nil)) nil)) nil))
                nil)
               ("2" (hide 2)
                (("2" (skeep)
                  (("2" (skeep)
                    (("2" (expand RTC (-2 -3))
                      (("2" (expand "IUnion")
                        (("2" (skeep)
                          (("2" (skolem -3 j)
                            (("2" (case "i = 0 OR j =0")
                              (("1"
                                (hide -2)
                                (("1"
                                  (prop)
                                  (("1"
                                    (replaces -1)
                                    (("1"
                                      (expand "iterate" -1)
                                      (("1"
                                        (replaces -1)
                                        (("1"
                                          (inst 1 "c")
                                          (("1"
                                            (expand "RTC")
                                            (("1"
                                              (expand "IUnion")
                                              (("1"
                                                (prop)
                                                (("1" (inst?) nil nil)
                                                 ("2"
                                                  (inst 1 0)
                                                  (("2"
                                                    (expand "iterate")
                                                    (("2"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (replaces -1)
                                    (("2"
                                      (expand iterate -2)
                                      (("2"
                                        (replaces -2)
                                        (("2"
                                          (inst 1 b)
                                          (("2"
                                            (expand "RTC")
                                            (("2"
                                              (expand "IUnion")
                                              (("2"
                                                (prop)
                                                (("1"
                                                  (inst 1 0)
                                                  (("1"
                                                    (expand "iterate")
                                                    (("1"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2" (inst?) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (lemma iterate_addition)
                                (("2"
                                  (copy -1)
                                  (("2"
                                    (inst -1 R 1 "i-1")
                                    (("1"
                                      (inst -2 R 1 "j - 1")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "o ")
                                          (("1"
                                            (replaces -1)
                                            (("1"
                                              (replaces -1)
                                              (("1"
                                                (beta)
                                                (("1"
                                                  (skolem -2 "b1")
                                                  (("1"
                                                    (skolem -3 "c1")
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (expand "LC?")
                                                        (("1"
                                                          (rewrite
                                                           iterate_one)
                                                          (("1"
                                                            (inst
                                                             -6
                                                             x
                                                             b1
                                                             c1)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (skolem
                                                                 -6
                                                                 ulc)
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (copy
                                                                     -1)
                                                                    (("1"
                                                                      (inst
                                                                       -1
                                                                       b1)
                                                                      (("1"
                                                                        (prop)
                                                                        (("1"
                                                                          (inst
                                                                           -1
                                                                           b
                                                                           ulc)
                                                                          (("1"
                                                                            (prop)
                                                                            (("1"
                                                                              (skolem
                                                                               -1
                                                                               ul)
                                                                              (("1"
                                                                                (flatten)
                                                                                (("1"
                                                                                  (inst
                                                                                   -3
                                                                                   c1)
                                                                                  (("1"
                                                                                    (prop)
                                                                                    (("1"
                                                                                      (inst
                                                                                       -1
                                                                                       ul
                                                                                       c)
                                                                                      (("1"
                                                                                        (prop)
                                                                                        (("1"
                                                                                          (skolem
                                                                                           -1
                                                                                           u)
                                                                                          (("1"
                                                                                            (inst
                                                                                             3
                                                                                             u)
                                                                                            (("1"
                                                                                              (flatten)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (hide-all-but
                                                                                                   (-1
                                                                                                    -3
                                                                                                    3))
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "RTC")
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "IUnion")
                                                                                                      (("1"
                                                                                                        (skolem
                                                                                                         -1
                                                                                                         m)
                                                                                                        (("1"
                                                                                                          (skolem
                                                                                                           -2
                                                                                                           n)
                                                                                                          (("1"
                                                                                                            (inst
                                                                                                             1
                                                                                                             "n+m")
                                                                                                            (("1"
                                                                                                              (rewrite
                                                                                                               iterate_addition)
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "o ")
                                                                                                                (("1"
                                                                                                                  (inst?)
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (hide-all-but
                                                                                           (-2
                                                                                            -8
                                                                                            1))
                                                                                          (("2"
                                                                                            (expand
                                                                                             "RTC")
                                                                                            (("2"
                                                                                              (expand
                                                                                               "IUnion")
                                                                                              (("2"
                                                                                                (skolem
                                                                                                 -2
                                                                                                 m)
                                                                                                (("2"
                                                                                                  (skolem
                                                                                                   -1
                                                                                                   n)
                                                                                                  (("2"
                                                                                                    (inst
                                                                                                     1
                                                                                                     "m+n")
                                                                                                    (("2"
                                                                                                      (rewrite
                                                                                                       iterate_addition)
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "o ")
                                                                                                        (("2"
                                                                                                          (inst
                                                                                                           1
                                                                                                           ulc)
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("3"
                                                                                          (hide-all-but
                                                                                           (-6
                                                                                            1))
                                                                                          (("3"
                                                                                            (expand
                                                                                             "RTC")
                                                                                            (("3"
                                                                                              (expand
                                                                                               "IUnion")
                                                                                              (("3"
                                                                                                (inst?)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (hide-all-but
                                                                                       (-5
                                                                                        1))
                                                                                      (("2"
                                                                                        (expand
                                                                                         "TC")
                                                                                        (("2"
                                                                                          (expand
                                                                                           "IUnion")
                                                                                          (("2"
                                                                                            (inst
                                                                                             1
                                                                                             1)
                                                                                            (("2"
                                                                                              (rewrite
                                                                                               iterate_one)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (hide-all-but
                                                                               (-3
                                                                                1))
                                                                              (("2"
                                                                                (expand
                                                                                 "RTC")
                                                                                (("2"
                                                                                  (expand
                                                                                   "IUnion")
                                                                                  (("2"
                                                                                    (inst?)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (hide-all-but
                                                                           (-2
                                                                            1))
                                                                          (("2"
                                                                            (expand
                                                                             "TC")
                                                                            (("2"
                                                                              (expand
                                                                               "IUnion")
                                                                              (("2"
                                                                                (inst
                                                                                 1
                                                                                 1)
                                                                                (("2"
                                                                                  (rewrite
                                                                                   iterate_one)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (assert) nil nil))
                                      nil)
                                     ("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand "SN?") (("2" (propax) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((C? const-decl "bool" predCommutation nil)
    (SN? const-decl "bool" predCommutation nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (iterate def-decl "pred[[T, T]]" relation_iterate orders)
    (TRUE const-decl "bool" booleans nil)
    (j skolem-const-decl "nat" predCommutation nil)
    (O const-decl "bool" relation_props nil)
    (iterate_one formula-decl nil predCommutation nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (TC const-decl "transitive" relations_closure TRS)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (LC? const-decl "bool" predCommutation nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (i skolem-const-decl "nat" predCommutation nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (iterate_addition formula-decl nil predCommutation nil)
    (IUnion const-decl "set[T]" indexed_sets nil)
    (RTC const-decl "reflexive_transitive" predCommutation nil)
    (reflexive_transitive type-eq-decl nil predCommutation nil)
    (reflexive_transitive? const-decl "bool" predCommutation nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (noetherian type-eq-decl nil noetherian TRS)
    (noetherian? const-decl "bool" noetherian TRS)
    (R skolem-const-decl "PRED[[T, T]]" predCommutation nil)
    (C_IMPL_LC formula-decl nil predCommutation nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (noetherian_induction formula-decl nil noetherian TRS)
    (T nonempty-type-decl nil predCommutation nil))
   nil)
  (NewmanLemma-2 nil 3696866268
   ("" (lemma noetherian_induction)
    (("" (skeep)
      (("" (prop)
        (("1" (rewrite "C_IMPL_LC") nil)
         ("2" (expand C?)
          (("2"
            (inst -2 "R"
             "LAMBDA(a:T): (FORALL(b,c:T) : RTC(R)(a, b) AND RTC(R)(a, c) IMPLIES EXISTS (d:T) : RTC(R)(b, d) AND RTC(R)(c, d))")
            (("1" (prop)
              (("1" (skeep)
                (("1" (inst -1 x)
                  (("1" (inst?) (("1" (assert) nil)))))))
               ("2" (skeep)
                (("2" (hide -1)
                  (("2" (hide 2)
                    (("2" (skeep)
                      (("2" (expand RTC (-1 -2))
                        (("2" (expand "IUnion")
                          (("2" (skeep)
                            (("2" (skolem -2 j)
                              (("2"
                                (case "i = 0")
                                (("1"
                                  (replaces -1)
                                  (("1"
                                    (expand iterate -1)
                                    (("1"
                                      (replaces -1)
                                      (("1"
                                        (inst 1 c)
                                        (("1"
                                          (expand "RTC")
                                          (("1"
                                            (expand "IUnion")
                                            (("1"
                                              (prop)
                                              (("1" (inst?) nil)
                                               ("2"
                                                (inst 1 0)
                                                (("2"
                                                  (expand "iterate")
                                                  (("2"
                                                    (propax)
                                                    nil)))))))))))))))))))
                                 ("2"
                                  (case "j = 0")
                                  (("1"
                                    (replaces -1)
                                    (("1"
                                      (expand iterate -2)
                                      (("1"
                                        (replaces -2)
                                        (("1"
                                          (inst 2 b)
                                          (("1"
                                            (expand "RTC")
                                            (("1"
                                              (expand "IUnion")
                                              (("1"
                                                (prop)
                                                (("1"
                                                  (inst 1 0)
                                                  (("1"
                                                    (expand "iterate")
                                                    (("1"
                                                      (propax)
                                                      nil)))))
                                                 ("2"
                                                  (inst?)
                                                  nil)))))))))))))))
                                   ("2"
                                    (lemma iterate_addition)
                                    (("2"
                                      (copy -1)
                                      (("2"
                                        (inst -1 R 1 "i-1")
                                        (("1"
                                          (inst -2 R 1 "j - 1")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "o ")
                                              (("1"
                                                (replaces -1)
                                                (("1"
                                                  (replaces -1)
                                                  (("1"
                                                    (beta)
                                                    (("1"
                                                      (skolem -1 "b1")
                                                      (("1"
                                                        (skolem
                                                         -2
                                                         "c1")
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (expand
                                                             "LC?")
                                                            (("1"
                                                              (rewrite
                                                               iterate_one)
                                                              (("1"
                                                                (inst
                                                                 -5
                                                                 x
                                                                 b1
                                                                 c1)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (skolem
                                                                     -5
                                                                     ulc)
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (reveal
                                                                         -5)
                                                                        (("1"
                                                                          (copy
                                                                           -1)
                                                                          (("1"
                                                                            (hide
                                                                             -1)
                                                                            (("1"
                                                                              (inst
                                                                               -1
                                                                               b1)
                                                                              (("1"
                                                                                (prop)
                                                                                (("1"
                                                                                  (inst
                                                                                   -1
                                                                                   b
                                                                                   ulc)
                                                                                  (("1"
                                                                                    (prop)
                                                                                    (("1"
                                                                                      (skolem
                                                                                       -1
                                                                                       ul)
                                                                                      (("1"
                                                                                        (flatten)
                                                                                        (("1"
                                                                                          (reveal
                                                                                           -6)
                                                                                          (("1"
                                                                                            (inst
                                                                                             -1
                                                                                             c1)
                                                                                            (("1"
                                                                                              (prop)
                                                                                              (("1"
                                                                                                (inst
                                                                                                 -1
                                                                                                 ul
                                                                                                 c)
                                                                                                (("1"
                                                                                                  (prop)
                                                                                                  (("1"
                                                                                                    (skolem
                                                                                                     -1
                                                                                                     u)
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       3
                                                                                                       u)
                                                                                                      (("1"
                                                                                                        (flatten)
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (hide-all-but
                                                                                                             (-1
                                                                                                              -3
                                                                                                              3))
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "RTC")
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "IUnion")
                                                                                                                (("1"
                                                                                                                  (skolem
                                                                                                                   -1
                                                                                                                   m)
                                                                                                                  (("1"
                                                                                                                    (skolem
                                                                                                                     -2
                                                                                                                     n)
                                                                                                                    (("1"
                                                                                                                      (inst
                                                                                                                       1
                                                                                                                       "n+m")
                                                                                                                      (("1"
                                                                                                                        (rewrite
                                                                                                                         iterate_addition)
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           "o ")
                                                                                                                          (("1"
                                                                                                                            (inst?)
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              nil)))))))))))))))))))))))))))
                                                                                                   ("2"
                                                                                                    (hide-all-but
                                                                                                     (-2
                                                                                                      -8
                                                                                                      1))
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "RTC")
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "IUnion")
                                                                                                        (("2"
                                                                                                          (skolem
                                                                                                           -2
                                                                                                           m)
                                                                                                          (("2"
                                                                                                            (skolem
                                                                                                             -1
                                                                                                             n)
                                                                                                            (("2"
                                                                                                              (inst
                                                                                                               1
                                                                                                               "m+n")
                                                                                                              (("2"
                                                                                                                (rewrite
                                                                                                                 iterate_addition)
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   "o ")
                                                                                                                  (("2"
                                                                                                                    (inst
                                                                                                                     1
                                                                                                                     ulc)
                                                                                                                    (("2"
                                                                                                                      (assert)
                                                                                                                      nil)))))))))))))))))))
                                                                                                   ("3"
                                                                                                    (hide-all-but
                                                                                                     (-6
                                                                                                      1))
                                                                                                    (("3"
                                                                                                      (expand
                                                                                                       "RTC")
                                                                                                      (("3"
                                                                                                        (expand
                                                                                                         "IUnion")
                                                                                                        (("3"
                                                                                                          (inst?)
                                                                                                          nil)))))))))))
                                                                                               ("2"
                                                                                                (hide-all-but
                                                                                                 (-5
                                                                                                  1))
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "TC")
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "IUnion")
                                                                                                    (("2"
                                                                                                      (inst
                                                                                                       1
                                                                                                       1)
                                                                                                      (("2"
                                                                                                        (rewrite
                                                                                                         iterate_one)
                                                                                                        nil)))))))))))))))))))
                                                                                     ("2"
                                                                                      (hide-all-but
                                                                                       (-2
                                                                                        1))
                                                                                      (("2"
                                                                                        (expand
                                                                                         "RTC")
                                                                                        (("2"
                                                                                          (expand
                                                                                           "IUnion")
                                                                                          (("2"
                                                                                            (inst?)
                                                                                            nil)))))))))))
                                                                                 ("2"
                                                                                  (hide-all-but
                                                                                   (-1
                                                                                    1))
                                                                                  (("2"
                                                                                    (expand
                                                                                     "TC")
                                                                                    (("2"
                                                                                      (expand
                                                                                       "IUnion")
                                                                                      (("2"
                                                                                        (inst
                                                                                         1
                                                                                         1)
                                                                                        (("2"
                                                                                          (rewrite
                                                                                           iterate_one)
                                                                                          nil)))))))))))))))))))))))))))))))))))))))))))))))
                                           ("2" (assert) nil)))
                                         ("2"
                                          (assert)
                                          nil)))))))))))))))))))))))))))))
             ("2" (expand "SN?") (("2" (propax) nil))))))))))))
    nil)
   ((C? const-decl "bool" predCommutation nil)
    (SN? const-decl "bool" predCommutation nil)
    (IUnion const-decl "set[T]" indexed_sets nil)
    (O const-decl "bool" relation_props nil)
    (iterate_one formula-decl nil predCommutation nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (TC const-decl "transitive" relations_closure TRS)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (LC? const-decl "bool" predCommutation nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (iterate_addition formula-decl nil predCommutation nil)
    (iterate def-decl "pred[[T, T]]" relation_iterate orders)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (RTC const-decl "reflexive_transitive" predCommutation nil)
    (reflexive_transitive type-eq-decl nil predCommutation nil)
    (reflexive_transitive? const-decl "bool" predCommutation nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (noetherian type-eq-decl nil noetherian TRS)
    (noetherian? const-decl "bool" noetherian TRS)
    (C_IMPL_LC formula-decl nil predCommutation nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (noetherian_induction formula-decl nil noetherian TRS)
    (T nonempty-type-decl nil predCommutation nil))
   nil)
  (NewmanLemma-1 nil 3696784963
   ("" (lemma noetherian_induction)
    (("" (skeep)
      (("" (prop)
        (("1" (rewrite "C_IMPL_LC") nil nil)
         ("2" (expand C?)
          (("2"
            (inst -2 "R"
             "LAMBDA(a:T): (FORALL(b,c:T) : RTC(R)(a, b) AND RTC(R)(a, c) IMPLIES EXISTS (d:T) : RTC(R)(b, d) AND RTC(R)(c, d))")
            (("1" (prop)
              (("1" (skeep)
                (("1" (inst -1 x)
                  (("1" (inst?) (("1" (assert) nil nil)) nil)) nil))
                nil)
               ("2" (skeep)
                (("2" (hide -1)
                  (("2" (hide 2)
                    (("2" (skeep)
                      (("2" (expand RTC (-1 -2))
                        (("2" (expand "IUnion")
                          (("2" (skeep)
                            (("2" (skolem -2 j)
                              (("2"
                                (case "i = 0")
                                (("1"
                                  (replaces -1)
                                  (("1"
                                    (expand iterate -1)
                                    (("1"
                                      (replaces -1)
                                      (("1"
                                        (inst 1 c)
                                        (("1"
                                          (expand "RTC")
                                          (("1"
                                            (expand "IUnion")
                                            (("1"
                                              (prop)
                                              (("1" (inst?) nil nil)
                                               ("2"
                                                (inst 1 0)
                                                (("2"
                                                  (expand "iterate")
                                                  (("2"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (case "j = 0")
                                  (("1"
                                    (replaces -1)
                                    (("1"
                                      (expand iterate -2)
                                      (("1"
                                        (replaces -2)
                                        (("1"
                                          (inst 2 b)
                                          (("1"
                                            (expand "RTC")
                                            (("1"
                                              (expand "IUnion")
                                              (("1"
                                                (prop)
                                                (("1"
                                                  (inst 1 0)
                                                  (("1"
                                                    (expand "iterate")
                                                    (("1"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2" (inst?) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (lemma iterate_addition)
                                    (("2"
                                      (copy -1)
                                      (("2"
                                        (inst -1 R 1 "i-1")
                                        (("1"
                                          (inst -2 R 1 "j - 1")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "o ")
                                              (("1"
                                                (replaces -1)
                                                (("1"
                                                  (replaces -1)
                                                  (("1"
                                                    (beta)
                                                    (("1"
                                                      (skolem -1 "b1")
                                                      (("1"
                                                        (skolem
                                                         -2
                                                         "c1")
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (expand
                                                             "LC?")
                                                            (("1"
                                                              (rewrite
                                                               iterate_one)
                                                              (("1"
                                                                (inst
                                                                 -5
                                                                 x
                                                                 b1
                                                                 c1)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (skolem
                                                                     -5
                                                                     ulc)
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (reveal
                                                                         -5)
                                                                        (("1"
                                                                          (copy
                                                                           -1)
                                                                          (("1"
                                                                            (hide
                                                                             -1)
                                                                            (("1"
                                                                              (inst
                                                                               -1
                                                                               b1)
                                                                              (("1"
                                                                                (prop)
                                                                                (("1"
                                                                                  (inst
                                                                                   -1
                                                                                   b
                                                                                   ulc)
                                                                                  (("1"
                                                                                    (prop)
                                                                                    (("1"
                                                                                      (skolem
                                                                                       -1
                                                                                       ul)
                                                                                      (("1"
                                                                                        (flatten)
                                                                                        (("1"
                                                                                          (reveal
                                                                                           -6)
                                                                                          (("1"
                                                                                            (inst
                                                                                             -1
                                                                                             c1)
                                                                                            (("1"
                                                                                              (prop)
                                                                                              (("1"
                                                                                                (inst
                                                                                                 -1
                                                                                                 ul
                                                                                                 c)
                                                                                                (("1"
                                                                                                  (prop)
                                                                                                  (("1"
                                                                                                    (skolem
                                                                                                     -1
                                                                                                     u)
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       3
                                                                                                       u)
                                                                                                      (("1"
                                                                                                        (flatten)
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (hide-all-but
                                                                                                             (-1
                                                                                                              -3
                                                                                                              3))
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "RTC")
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "IUnion")
                                                                                                                (("1"
                                                                                                                  (skolem
                                                                                                                   -1
                                                                                                                   m)
                                                                                                                  (("1"
                                                                                                                    (skolem
                                                                                                                     -2
                                                                                                                     n)
                                                                                                                    (("1"
                                                                                                                      (inst
                                                                                                                       1
                                                                                                                       "n+m")
                                                                                                                      (("1"
                                                                                                                        (rewrite
                                                                                                                         iterate_addition)
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           "o ")
                                                                                                                          (("1"
                                                                                                                            (inst?)
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (hide-all-but
                                                                                                     (-2
                                                                                                      -8
                                                                                                      1))
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "RTC")
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "IUnion")
                                                                                                        (("2"
                                                                                                          (skolem
                                                                                                           -2
                                                                                                           m)
                                                                                                          (("2"
                                                                                                            (skolem
                                                                                                             -1
                                                                                                             n)
                                                                                                            (("2"
                                                                                                              (inst
                                                                                                               1
                                                                                                               "m+n")
                                                                                                              (("2"
                                                                                                                (rewrite
                                                                                                                 iterate_addition)
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   "o ")
                                                                                                                  (("2"
                                                                                                                    (inst
                                                                                                                     1
                                                                                                                     ulc)
                                                                                                                    (("2"
                                                                                                                      (assert)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("3"
                                                                                                    (hide-all-but
                                                                                                     (-6
                                                                                                      1))
                                                                                                    (("3"
                                                                                                      (expand
                                                                                                       "RTC")
                                                                                                      (("3"
                                                                                                        (expand
                                                                                                         "IUnion")
                                                                                                        (("3"
                                                                                                          (inst?)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (hide-all-but
                                                                                                 (-5
                                                                                                  1))
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "TC")
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "IUnion")
                                                                                                    (("2"
                                                                                                      (inst
                                                                                                       1
                                                                                                       1)
                                                                                                      (("2"
                                                                                                        (rewrite
                                                                                                         iterate_one)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (hide-all-but
                                                                                       (-2
                                                                                        1))
                                                                                      (("2"
                                                                                        (expand
                                                                                         "RTC")
                                                                                        (("2"
                                                                                          (expand
                                                                                           "IUnion")
                                                                                          (("2"
                                                                                            (inst?)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (hide-all-but
                                                                                   (-1
                                                                                    1))
                                                                                  (("2"
                                                                                    (expand
                                                                                     "TC")
                                                                                    (("2"
                                                                                      (expand
                                                                                       "IUnion")
                                                                                      (("2"
                                                                                        (inst
                                                                                         1
                                                                                         1)
                                                                                        (("2"
                                                                                          (rewrite
                                                                                           iterate_one)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (assert) nil nil))
                                          nil)
                                         ("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand "SN?") (("2" (propax) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((C? const-decl "bool" predCommutation nil)
    (SN? const-decl "bool" predCommutation nil)
    (IUnion const-decl "set[T]" indexed_sets nil)
    (O const-decl "bool" relation_props nil)
    (iterate_one formula-decl nil predCommutation nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (TC const-decl "transitive" relations_closure TRS)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (LC? const-decl "bool" predCommutation nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (iterate_addition formula-decl nil predCommutation nil)
    (iterate def-decl "pred[[T, T]]" relation_iterate orders)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (RTC const-decl "reflexive_transitive" predCommutation nil)
    (reflexive_transitive type-eq-decl nil predCommutation nil)
    (reflexive_transitive? const-decl "bool" predCommutation nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (noetherian type-eq-decl nil noetherian TRS)
    (noetherian? const-decl "bool" noetherian TRS)
    (C_IMPL_LC formula-decl nil predCommutation nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (noetherian_induction formula-decl nil noetherian TRS)
    (T nonempty-type-decl nil predCommutation nil))
   shostak)))

